/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.45
 * Generated at: 2017-10-22 13:00:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class analyze_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/Administrator/.m2/repository/javax/servlet/jstl/1.2/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153356282000L));
    _jspx_dependants.put("file:/C:/Users/Administrator/.m2/repository/javax/servlet/jstl/1.2/jstl-1.2.jar", Long.valueOf(1502936911994L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	String path = request.getContextPath();

      out.write("\r\n");
      out.write("<div class=\"user-analyze\">\r\n");
      out.write("\t<div class=\"gender-analyze\">\r\n");
      out.write("\t\t<h5>用户性别分析统计</h5>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<span></span>male\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<canvas id=\"canvas\" height=\"150\" width=\"400\"></canvas>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"date-analyze\">\r\n");
      out.write("\t\t<h5>用户创建日期统计</h5>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<span></span>创建日期\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<canvas id=\"canvas1\" height=\"150\" width=\"500\"></canvas>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(path);
      out.write("/plugins/Chart.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tvar ctx = new Chart(document.getElementById(\"canvas\").getContext(\"2d\"));\r\n");
      out.write("\tvar ctx1 = new Chart(document.getElementById(\"canvas1\").getContext(\"2d\"));\r\n");
      out.write("\tvar options = {\r\n");
      out.write("\t\tscaleFontSize : 13,\r\n");
      out.write("\t\tscaleFontColor : \"#ffa45e\"\r\n");
      out.write("\t};\r\n");
      out.write("\r\n");
      out.write("\t// 饼状图  \r\n");
      out.write("\tvar pieChart = [ {\r\n");
      out.write("\t\tvalue : 50,\r\n");
      out.write("\t\tcolor : \"#FF6E8F\"\r\n");
      out.write("\t}, {\r\n");
      out.write("\t\tvalue : 30,\r\n");
      out.write("\t\tcolor : \"#40ACEF\"\r\n");
      out.write("\t},\r\n");
      out.write("\t/*  {value: 60, color: \"#ffddfb\"},  */\r\n");
      out.write("\t];\r\n");
      out.write("\tvar myPieChart = ctx.Pie(pieChart);\r\n");
      out.write("\r\n");
      out.write("\t// 线型图  \r\n");
      out.write("\tvar LineChart = {\r\n");
      out.write("\t\tlabels : [ \"Ruby\", \"jQuery\", \"Java\", \"ASP.Net\", \"PHP\" ],\r\n");
      out.write("\t\tdatasets : [ {\r\n");
      out.write("\t\t\tfillColor : \"rgba(151,249,190,0.5)\",\r\n");
      out.write("\t\t\tstrokeColor : \"rgba(255,255,255,1)\",\r\n");
      out.write("\t\t\tpointColor : \"rgba(220,220,220,1)\",\r\n");
      out.write("\t\t\tpointStrokeColor : \"#fff\",\r\n");
      out.write("\t\t\tdata : [ 10, 20, 30, 40, 50 ]\r\n");
      out.write("\t\t}, {\r\n");
      out.write("\t\t\tfillColor : \"rgba(252,147,65,0.5)\",\r\n");
      out.write("\t\t\tstrokeColor : \"rgba(255,255,255,1)\",\r\n");
      out.write("\t\t\tpointColor : \"rgba(173,173,173,1)\",\r\n");
      out.write("\t\t\tpointStrokeColor : \"#fff\",\r\n");
      out.write("\t\t\tdata : [ 28, 68, 40, 19, 96 ]\r\n");
      out.write("\t\t} ]\r\n");
      out.write("\t};\r\n");
      out.write("\tvar myLineChart = ctx1.Line(LineChart, options);\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
